var d = document, ori = 0, scaleToFit = true, __unload__ = false, c, ca, c2, ca2, db = d[so(83, 78, 69, 72, 42)], de = d.documentElement, dx = d[so(29, 26, 18, 30, 28, 23, 115)], mf = Math.floor, mr = Math.random, ms = String.fromCharCode, pli, cl0 = "8,8,8", cl1 = "247,247,247", cld = "70,70,70", clr = "207,21,21", fe = "eval", fb = "bold ", fi = "italic ", ff = "Tahoma, Domain, sans-serif", fm = 15 + "px " + ff, fmb = fb + fm, fmi = fi + fm, fml = 19 + "px " + ff, fmlb = fb + fml, fms = 12 + "px " + ff, fmsb = fb + fms, fmsi = fi + fms, fmv = 9 + "px " + ff, fmvb = fb + fmv, tdl = 0, txb, txh, tex = null, em, ek, et, ed, ex, etouch = false, mouseX = 0, mouseY = 0, mouseXm = 1, mouseYm = 1, etp = (new Date()).getTime(), spGrid, spWinGlyph, spWinText, spFacebook, spTwitter, spButton, spSqButton, spSqButtonRed, spNotes, spNotesRed, spButtonW, spSlot1, spSlot2, spSlotSel1, spSlotSel2, spErase, _cb, _cl, _cd, _cn, _cw, _cx, _cy, _diff = 0, _time = 0, _nm = 0, _sw, _sm, _xb = 17, _yb = 26, _xn = 17, _yn = 328, _yw = 0, _fa, _fd, _fc, _vip, viphandler = { getScores: function () { if (_time == 0) { return 0 } return (_diff == 2 ? 2300 : _diff == 1 ? 1600 : 1000) / Math.pow(_time + 1, 0.5) }, stop: function () { ec(); fade_start(0, 2, menu_start); _vip.game_end() }, restart: function () { ec(); fade_start(0, 2, dmenu_start); _vip.game_end() }, unload: function () { if (ca2 && ca2.parentNode) { ca2.parentNode.removeChild(ca2) } if (ca.parentNode) { ca.parentNode.removeChild(ca) } d.re = d.removeEventListener; if (!d.re) { d.re = d.detachEvent; d.ep = ms(111, 110) } if (d.removeEventListener) { d.removeEventListener("touchstart", eotm, false); d.removeEventListener("touchmove", eotm, false); d.removeEventListener("touchend", eote, false) } d.re(d.ep + "mousedown", eomd, false); d.re(d.ep + "mousemove", eom, false); d.re(d.ep + "keydown", eok, false); window.onresize = null; window.onorientationchange = null } }, CU, grid; if (!CU) { CU = {} } CU.Sudoku = { generate: function () { var g, f, h, k, b, e, a, j; g = new CU.sudoku.Grid(); j = []; for (f = 0; f < 81; f++) { j[f] = [1, 2, 3, 4, 5, 6, 7, 8, 9] } for (f = 0; f < 81; f++) { h = false; k = Math.floor(f / 9); b = f - (k * 9); while (j[f].length > 0) { e = Math.floor(Math.random() * j[f].length); a = j[f].splice(e, 1)[0]; g.setValue(b, k, a); if (!g.cellConflicts(b, k)) { h = true; break } else { g.setValue(b, k, 0); h = false } } if (!h) { j[f] = [1, 2, 3, 4, 5, 6, 7, 8, 9]; f -= 2 } } return g }, cull: function (h, g) { var f, e, j, k, b, a = []; for (f = 0; f < 81; f++) { a.push(f) } for (f = 0; f < g; f++) { e = Math.floor(Math.random() * a.length); j = a.splice(e, 1); k = Math.floor(j / 9); b = j - (k * 9); h.setValue(b, k, 0) } } }; CU.sudoku = {}; CU.sudoku.Grid = function () { var e, b, a; this.rows = []; for (e = 0; e < 9; e++) { b = []; for (a = 0; a < 9; a++) { b[a] = 0 } this.rows[e] = b } }; CU.sudoku.Grid.prototype = { rows: [], getValue: function (a, b) { return this.rows[b][a] }, setValue: function (a, e, b) { this.rows[e][a] = b }, cellConflicts: function (b, f) { var a, e = this.rows[f][b]; if (e == 0) { return false } for (a = 0; a < 9; a++) { if (a != f && this.rows[a][b] == e) { return true } if (a != b && this.rows[f][a] == e) { return true } } return !this._miniGridValid(b, f) }, _miniGridValid: function (g, q) { var b, p, e, n, j, i, o, a, k, m, h, f; b = Math.floor(g / 3); p = Math.floor(q / 3); e = b * 3; n = p * 3; j = (b + 1) * 3; i = (p + 1) * 3; o = []; for (a = n; a < i; a++) { for (k = e; k < j; k++) { m = this.rows[a][k]; if (m == 0) { continue } for (h = n; h < i; h++) { for (f = e; f < j; f++) { if (!(h == a && f == k)) { if (this.rows[h][f] == m) { return false } } } } o.push(m) } } return true } }; function si() { grid = CU.Sudoku.generate() } function sc(a) { CU.Sudoku.cull(grid, a) } function sa(f, e) { return grid.getValue(f, e) } function dei(a) { return d.getElementById(a) } 
function htx(e, a, f) {
    var b, g = d.createElement(e); 
    if (a) {
         for (b in a) { g.setAttribute(b, a[b]) }
     }
    if (f) { for (b in f) { g[b] = f[b] } } return g
 }
function lo(f, e) { return f.toLowerCase().indexOf(e) } function so() { var b = "", a, f = arguments[a]; for (a = arguments.length - 1; a--; ) { b += String.fromCharCode(arguments[a] ^ f) } return b } function ar(b, e) { b.splice(b.indexOf(e), 1) } function rp(g, f, a, h, e, b) { return (g >= a) && (f >= h) && (g < a + e) && (f < h + b) } function rs(e, b, f, a, g) { return rp(e, b, a - f.i, g - f.j, f.x, f.y) } function nii(a, e) { var b = new Image(); b.onload = e; b.src = a; return b } function ni(a) { tdl++; return nii(a, tdld) } function nc(a, b) { var e = d.createElement("canvas"); e.width = a; e.height = b; e.t = e.getContext("2d"); return e } function nsi(g, f, e, b, a, h) { this.u = g; this.v = f; this.x = e; this.y = b; this.i = a; this.j = h; this.o = nc(e, b); this.o.t.drawImage(tex, -g, -f) } function ns(g, f, e, b, a, h) { if (arguments.length > 4) { return new nsi(g, f, e, b, a, h) } return new nsi(g, f, e, b, 0, 0) } function tdld() { tdl--; if (!tdl) { fade_start(0, 2, _start) } } function pld() { if (tdl == 0) { return } if (!pli) { pli = nii("loading.png", pld); cc("#111"); cf("white"); ct(0, 0, fmb); c.t("Loading...", 160, 240) } else { c.i(pli, 0, 0) } } function cc(a) { ca.style.backgroundColor = a; ca.width = ca.width; ca.height = ca.height } function ct(e, b, a) { c.textAlign = e == 0 ? "center" : e > 0 ? "left" : "right"; c.textBaseline = b == 0 ? "middle" : b > 0 ? "top" : "bottom"; if (a) { c.font = a } } function cf(a) { c.fillStyle = a } function cfx(b, a) { c.fillStyle = "rgba(" + b + "," + a + ")" } function cr(f, e, b, a) { c.bp(); c.fr(f, e, b - f, a - e); c.cp() } function cs(e, b, a) { c.i(e.o, b - e.i, a - e.j) } function ec() { em = []; ek = []; et = []; ed = [] } function edx() { if (__unload__) { return } var b, a = ed.length; for (b = 0; b < a; b++) { ed[b]() } if (ca2) { ca2.width = ca2.width; c2.drawImage(ca, 0, 0, 320, 480, 0, 0, ca2.width, ca2.height) } } function eoc() { var b, a = em.length; for (b = 0; b < a; b++) { em[b](mouseX, mouseY) } } function eomd() { if (!etouch) { eoc() } } function eoto(b) { b.preventDefault(); var a = b.targetTouches; if (a.length !== 0) { if (ca2) { mouseX = (a[0].pageX - ca2.offsetLeft) * mouseXm; mouseY = (a[0].pageY - ca2.offsetTop) * mouseYm } else { if (ca) { mouseX = (a[0].pageX - ca.offsetLeft) * mouseXm; mouseY = (a[0].pageY - ca.offsetTop) * mouseYm } } } } function eote(a) { if (!etouch) { etouch = true } eoto(a); eoc() } function eotm(a) { eoto(a) } function eok(g) { if (etouch) { return } var a, f, b = window.event ? g.which : g.keyCode; a = ek.length; for (f = 0; f < a; f++) { ek[f](b) } } function eot() { if (__unload__) { return } var b, e, a = (new Date()).getTime(); e = (a - etp) / 1000, b, l = et.length; for (b = 0; b < l; b++) { et[b](e) } etp = a; setTimeout(eot, 32) } function eom(a) { if (a.pageX != undefined && a.pageY != undefined) { mouseX = a.pageX; mouseY = a.pageY } else { mouseX = a.clientX + db.scrollLeft + de.scrollLeft; mouseY = a.clientY + db.scrollTop + de.scrollTop } if (ca2) { mouseX -= ca2.offsetLeft; mouseY -= ca2.offsetTop } else { if (ca) { mouseX -= ca.offsetLeft; mouseY -= ca.offsetTop } } mouseX *= mouseXm; mouseY *= mouseYm } function fade_timer(a) { _fa += a * _fd; if ((_fd > 0 && _fa > 1) || (_fd < 0 && _fa < 0)) { if (_fd > 1) { _fd = 1 } ar(et, fade_timer); edx(); ar(ed, fade_draw); if (_fc) { _fc() } } else { edx() } } function fade_draw() { if (_fa <= 0.01) { return } cf("rgba(0, 0, 0, " + _fa + ")"); cr(-5, -5, 325, 485) } function fade_start(b, e, f) { _fa = b; _fd = e; _fc = f; et.push(fade_timer); ed.push(fade_draw) } function cao() { c.i(tex, 0, 429, 320, 16, 0, 0, 320, 16); for (var a = 0; a < 12; a++) { c.i(tex, 0, 430, 320, 32, 0, 16 + a * 32, 320, 32) } c.i(tex, 0, 432, 320, 80, 0, 400, 320, 80) } function game_num(a, e) { var b; if (b = _cb[e][a]) { return b } if (b = _cl[e][a]) { return b } return 0 } function game_complete() { var f, e, b, a; _cy = -1; b = []; a = true; for (e = 0; e < 9; e++) { for (f = 0; f < 9; f++) { _cw[e][f] = false } } for (e = 0; e < 9; e++) { for (f = 0; f <= 9; f++) { b[f] = 0 } for (f = 0; f < 9; f++) { b[game_num(f, e)]++ } for (f = 0; f < 9; f++) { if (game_num(f, e) == 0 || b[game_num(f, e)] != 1) { a = false; if (_cb[e][f] == 0) { _cw[e][f] = true } } } for (f = 0; f <= 9; f++) { b[f] = 0 } for (f = 0; f < 9; f++) { b[game_num(e, f)]++ } for (f = 0; f < 9; f++) { if (game_num(e, f) == 0 || b[game_num(e, f)] != 1) { a = false; if (_cb[f][e] == 0) { _cw[f][e] = true } } } } if (!a) { _sw = true; edx(); _sw = false; return false } return true } function game_wint(a) { _yw -= a; if (_yw <= 0) { _yw = 0; _vip.game_end(); ec(); game_start(true); _vip.game_start(); game_ae(); edx() } } function game_time(a) { _time += a } function game_click2(a, b) { if (rs(a, b, spButton, 160, 240)) { ec(); fade_start(0, 2, menu_start); _time = 0; _vip.game_end() } if (rs(a, b, spButton, 160, 288)) { ar(em, game_click2); em.push(game_click); _sm = false; edx() } } function game_click(a, n) { var m, h, f, b, g, e; for (h = 0; h < 9; h++) { for (m = 0; m < 9; m++) { g = _xb + 2 + mf(m / 3) * 2 + m * 31; e = _yb + 2 + mf(h / 3) * 2 + h * 31; if (!rp(a, n, g, e, 30, 30)) { continue } if (_cx != m || _cy != h) { _cx = m; _cy = h } else { _cy = -1 } edx(); return } } if (_cy != -1) { for (m = 0; m < 9; m++) { g = _xn + 2 + mf(m / 3) * 2 + m * 31; e = _yn + 2; if (!rp(a, n, g, e, 30, 30)) { continue } if (_cb[_cy][_cx] != 0) { continue } if (_nm) { b = _cn[_cy][_cx]; if (f = _cl[_cy][_cx]) { b.push(f); _cl[_cy][_cx] = 0 } f = b.indexOf(m + 1); if (f == -1) { b.push(m + 1) } else { b.splice(f, 1) } } else { _cl[_cy][_cx] = m + 1; _cn[_cy][_cx] = [] } return edx() } } if (rs(a, n, spButton, _xn + 48, _yn + 64) && game_complete()) { _yw = 3; ec(); et.push(game_wint); ed.push(game_draw); return edx() } if (_cy != -1 && rs(a, n, spSqButton, _xn + 105, _yn + 47) && _cb[_cy][_cx] == 0) { _cl[_cy][_cx] = 0; _cn[_cy][_cx] = []; return edx() } if (rs(a, n, spSqButton, _xn + 147, _yn + 47)) { _nm = !_nm; return edx() } if (rs(a, n, spButton, _xn + 238, _yn + 64)) { ar(em, game_click); em.push(game_click2); _sm = true; edx() } } function game_ae() { em.push(game_click); et.push(game_time) } function game_draw() { c.i(txb, -320, -480); var n, h, f, b, a, g, e, p; a = true; for (h = 0; h < 9; h++) { for (n = 0; n < 9; n++) { f = (n + h) & 1 ? spSlot2 : spSlot1; if (_cx == n && _cy == h) { f = spSlotSel1 } if (_sw && _cw[h][n]) { f = (f == spSlotSel1) ? spSlotSel2 : spSlotSel1 } g = _xb + 2 + mf(n / 3) * 2 + n * 31; e = _yb + 2 + mf(h / 3) * 2 + h * 31; cs(f, g, e); if (f = _cb[h][n]) { c.i(tex, f * 15, 350, 15, 15, g + 7, e + 7, 15, 15) } else { if (f = _cl[h][n]) { c.i(tex, f * 15 + 150, 350, 15, 15, g + 7, e + 7, 15, 15) } else { if (b = _cn[h][n].length) { a = _cn[h][n]; cfx(cld, 1); ct(0, 0, fmvb); for (f = 0; f < b; f++) { c.i(tex, a[f] * 15 + 150, 365, 15, 15, g - 2 + 9 * (f % 3), e - 2 + 9 * mf(f / 3), 15, 15) } } } } } } a = a ? 1 : 0; for (n = 0; n < 9; n += a) { g = _xn + 2 + mf(n / 3) * 2 + n * 31; e = _yn + 2; cs(spSlot1, g, e); c.i(tex, (n + 1) * 15, 365, 15, 15, g + 7, e + 7, 15, 15) } cs(spGrid, _xb, _yb); cs(spButton, _xn + 48, _yn + 64); cs(spSqButton, _xn + 105, _yn + 47); cs(spErase, _xn + 122, _yn + 64); cs(_nm ? spSqButtonRed : spSqButton, _xn + 147, _yn + 47); cs(_nm ? spNotesRed : spNotes, _xn + 164, _yn + 64); cs(spButton, _xn + 238, _yn + 64); ct(0, 0, fmsb); cf("black"); c.t("Complete", _xn + 48, _yn + 64); c.t("Menu", _xn + 238, _yn + 64); if (_yw > 0 || _sm) { cf("rgba(0, 0, 0, 0.75)"); cr(-5, -5, 325, 485) } if (_yw > 0) { cs(spWinGlyph, 160, 240); c.i(txh, 0, 320, 320, 50, 0, 215, 320, 50); cf("white"); ct(0, 0, fmb); p = ""; n = mf(_time); h = 0; if (n > 3600) { h = mf(n / 3600); p += h + ":"; n = n % 3600 } if (n > 60) { h = mf(n / 60); if (h < 10 && p.length) { p += "0" } p += h + ":"; n = n % 60 } if (n < 10 && p.length) { p += "0" } p += n; c.t("Final time: " + p, 160, 192) } else { if (_sm) { cf("rgba(255, 255, 255, 0.4)"); cr(-5, 164, 325, 311); cf("white"); ct(0, -1, fmsb); c.t("Are you sure you want to return to the", 160, 192); ct(0, 1, fmsb); c.t("menu? Your game will be not be saved.", 160, 192); cs(spButton, 160, 240); cs(spButton, 160, 288); ct(0, 0, fmsb); cf("black"); c.t("Confirm", 160, 240); c.t("Cancel", 160, 288) } } cao() } function game_start(f) { ec(); si(); _nm = false; _sw = false; _sm = false; _cx = _cy = -1; _time = 0; _cb = []; _cl = []; _cd = []; _cn = []; _cw = []; var e, b, a; for (b = 0; b < 9; b++) { _cb[b] = []; _cl[b] = []; _cd[b] = []; _cn[b] = []; _cw[b] = []; for (e = 0; e < 9; e++) { _cb[b][e] = 0; _cd[b][e] = 0; _cl[b][e] = 0; _cn[b][e] = []; _cw[b][e] = false } } for (b = 0; b < 9; b++) { for (e = 0; e < 9; e++) { _cd[b][e] = sa(e, b) } } sc(window.godmode ? 1 : _diff == 2 ? 47 : _diff == 1 ? 40 : 20); for (b = 0; b < 9; b++) { for (e = 0; e < 9; e++) { a = sa(e, b); _cb[b][e] = _cl[b][e] = a } } ed.push(game_draw); if (!f) { fade_start(1, -2, game_ae) } } function dmenu_click(a, e) { var b = -1; if (rs(a, e, spButton, 160, 192)) { b = 0 } if (rs(a, e, spButton, 160, 240)) { b = 1 } if (rs(a, e, spButton, 160, 288)) { b = 2 } if (b != -1) { _diff = b; ec(); fade_start(0, 2, game_start) } } function dmenu_ae() { em.push(dmenu_click) } function dmenu_draw() { c.i(txb, 0, -480); cf("rgba(255, 255, 255, 0.4)"); cr(-5, 164, 325, 311); cs(spButton, 160, 192); cs(spButton, 160, 240); cs(spButton, 160, 288); ct(0, 0, fmsb); cf("black"); c.t("Easy", 160, 192); c.t("Medium", 160, 240); c.t("Hard", 160, 288); cao() } function dmenu_start() { _vip.game_start(); ec(); ed.push(dmenu_draw); fade_start(1, -2, dmenu_ae) } function howto_click(a, b) { if (rs(a, b, spButton, 160, 384)) { ec(); fade_start(0, 2, menu_start) } } function howto_ae() { em.push(howto_click) } function howto_draw() { c.i(txb, 0, 0); cf("rgba(255, 255, 255, 0.4)"); cr(-5, 100, 325, 340); c.i(txh, 0, 0, 320, 320, 0, 50, 320, 320); cs(spButton, 160, 384); ct(0, 0, fmsb); cf("black"); c.t("Back", 160, 384); cao() } function howto_start() { ec(); ed.push(howto_draw); fade_start(1, -2, howto_ae) } function menu_click(a, h) { var e, g, b = ex.length, f = b - 1; for (e = 0; e < b; e++) { g = 240 + (e - f / 2) * 48; if (rs(a, h, spButton, 160, g)) { ex[e].click() } } } function menu_ae() { em.push(menu_click) } function menu_start() { _time = Number.POSITIVE_INFINITY; ec(); ed.push(menu_draw); ex = []; ex.push({ text: "New game", click: function () { ec(); fade_start(0, 2, dmenu_start) } }); ex.push({ text: "How to play", click: function () { ec(); fade_start(0, 2, howto_start) } }); ex.push({ text: "Exit", click: function () { viphandler.unload(); _vip.game_quit() } }); fade_start(1, -2, menu_ae) } function menu_draw() { c.i(txb, -320, 0); cf("rgba(255, 255, 255, 0.4)"); cr(-5, 164, 325, 311); ct(0, 0, fmsb); var b, f, a = ex.length, e = a - 1; for (b = 0; b < a; b++) { f = 240 + (b - e / 2) * 48; cs(spButton, 160, f); cf(ex[b].color ? ex[b].color : "black"); c.t(ex[b].text, 160, f) } cao() } function _start() { spGrid = ns(0, 0, 300, 350, 7, 7), spWinGlyph = ns(300, 0, 174, 338, 87, 169), spWinText = ns(0, 380, 224, 49, 112, 24), spFacebook = ns(474, 0, 32, 32), spTwitter = ns(474, 32, 32, 32), spButton = ns(300, 338, 96, 34, 48, 17), spButtonW = ns(396, 338, 116, 34, 58, 17), spSqButton = ns(474, 64, 34, 34, 0, 0), spSqButtonRed = ns(474, 201, 34, 34, 0, 0), spSlot1 = ns(474, 111, 30, 30, 0, 0), spSlot2 = ns(474, 141, 30, 30, 0, 0), spSlotSel1 = ns(474, 171, 30, 30, 0, 0), spSlotSel2 = ns(474, 235, 30, 30, 0, 0), spErase = ns(474, 98, 15, 13, 7, 6), spNotes = ns(489, 98, 11, 13, 5, 6), spNotesRed = ns(500, 98, 11, 13, 5, 6); menu_start() } function _scroll() { window.scrollTo(0, 1) } function _orient() { window.scrollTo(0, 1); var a = window.orientation; switch (a) { case 90: ori = 1; break; case -90: ori = -1; break; default: ori = 0 } } function _loaded() { setTimeout(_scroll, 1) } function window_get_width() { return typeof (window.innerWidth) == "number" ? window.innerWidth : document.documentElement && document.documentElement.clientWidth ? document.documentElement.clientWidth : document.body && document.body.clientWidth ? document.body.clientWidth : 720 } function window_get_height() { return typeof (window.innerHeight) == "number" ? window.innerHeight : document.documentElement && document.documentElement.clientHeight ? document.documentElement.clientHeight : document.body && document.body.clientHeight ? document.body.clientHeight : 540 } function window_rescale() { if (!scaleToFit) { return } var h, f = window_get_width(), g = window_get_height() - 1, e, b, a; if (g < 480) { g = 480 } if (!ca2) { ca2 = ca; c2 = ca2.getContext("2d"); ca = nc(320, 480) } h = Math.min(g / 480, f / 320); mouseXm = mouseYm = 1 / h; ca2.height = mf(h * 480); ca2.width = ca2.height * 2 / 3; e = mf((f - ca2.width) / 2); b = mf((g - ca2.height) / 2); ca2.setAttribute("style", "position: absolute; left: " + e + "px; top: " + b + "px;"); a = ca2.height * 0.1; document.getElementById("ui").setAttribute("style", "position: absolute;left: " + (e + mf((ca2.width - 320) / 2)) + "px;top: " + mf(b + ca2.height - a + (a - 48) / 2) + "px;width: 320px;height: 48px;"); if (c) { edx() } } function _cinit() { ca = d.getElementById("ca"); window_rescale(); c = ca.getContext("2d"); c.i = c.drawImage; c.t = c.fillText; c.bp = c.beginPath; c.cp = c.closePath; c.s = c.stroke; c.f = c.fill; c.sr = c.strokeRect; c.fr = c.fillRect } function _cload() { eot(); if (!txb) { txb = ni("back.jpg") } if (!tex) { tex = ni("tex.png") } if (!txh) { txh = ni("howto.png") } pld() } function _init() {
    var f, e = false;
    var b = { onload: function () {
        vipgames.api.register({ game_id: "Sudoku", load: function (g) {
            _vip = g; var h = _vip.getScene(); if (!h) { h = dei("game") }
            h.appendChild(htx("canvas", { width: 320, height: 480, id: "ca" }, {}));
            _cinit(); _cload(); _vip.game_load(viphandler)
        } 
    })
}
}; //d.body.appendChild(htx("script", null, b));
b.onload();
    ec();window.onresize=window_rescale;window.onorientationchange=_orient;window.addEventListener("load",_loaded);d.ae=d.addEventListener;d.ep=ms();if(!(z=d).ae){d.ae=d.attachEvent;d.ep=ms(111,110)}if(d.addEventListener){d.addEventListener("touchstart",eotm,false);d.addEventListener("touchmove",eotm,false);d.addEventListener("touchend",eote,false)}d.ae(d.ep+"mousedown",eomd,false);d.ae(d.ep+"mousemove",eom,false);d.ae(d.ep+"keydown",eok,false)}_init();